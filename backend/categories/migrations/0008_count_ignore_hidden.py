# Generated by Django 3.0.2 on 2020-04-11 09:36

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("categories", "0007_examcounts"),
    ]

    # The subquery contains all answer_section ids with at least one answer. By doing a left join on it
    # we have a new column sub.answer_section_id which is non-null iff the answer_section has at least one
    # answer.
    #
    # In the main query we simply join the answer_sections table on the sub.answer_section_id column, grouping by
    # the exam id.
    #
    # COUNT(aas.id) counts the total number of answer_sections with answers enabled.
    # COUNT(sub.answer_section_id) will only count those that have an answer.
    sql = """
    CREATE OR REPLACE VIEW categories_examcounts (id, exam_id, count_cuts, count_answered) AS
        SELECT CAST(ae.id AS bigint), ae.id, COUNT(aas.id) FILTER (WHERE aas.has_answers), COUNT(sub.answer_section_id)
        FROM answers_exam ae
        LEFT JOIN answers_answersection aas ON aas.exam_id = ae.id
        LEFT JOIN (
          SELECT answer_section_id
          FROM answers_answer aa
          GROUP BY aa.answer_section_id 
        ) sub ON sub.answer_section_id = aas.id
        GROUP BY ae.id
    ;
    """

    reverse_sql = """
    CREATE OR REPLACE VIEW categories_examcounts (id, exam_id, count_cuts, count_answered) AS
        SELECT row_number() OVER () as id,
            ae.id AS exam_id,
            (SELECT COUNT(*) FROM answers_answersection aas WHERE (aas.exam_id = ae.id)),
            (SELECT COUNT(*) FROM answers_answersection aas WHERE (aas.exam_id = ae.id AND EXISTS (
                SELECT aa.id FROM answers_answer aa WHERE aa.answer_section_id = aas.id
            )))
        FROM answers_exam ae
    ;
    """

    operations = [migrations.RunSQL(sql, reverse_sql)]
